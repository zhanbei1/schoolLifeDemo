// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentBaseInfoFieldNames          = builder.RawFieldNames(&StudentBaseInfo{})
	studentBaseInfoRows                = strings.Join(studentBaseInfoFieldNames, ",")
	studentBaseInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(studentBaseInfoFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	studentBaseInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(studentBaseInfoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheStudentBaseInfoIdPrefix        = "cache:studentBaseInfo:id:"
	cacheStudentBaseInfoStudentNoPrefix = "cache:studentBaseInfo:studentNo:"
	cacheStudentBaseInfoStudentPetNamePrefix = "cache:studentBaseInfo:petName:"
)

type (
	studentBaseInfoModel interface {
		Insert(ctx context.Context, data *StudentBaseInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StudentBaseInfo, error)
		FindOneByStudentNo(ctx context.Context, studentNo string) (*StudentBaseInfo, error)
		FindOneByPetname(ctx context.Context,petName string) (*StudentBaseInfo, error)
		Update(ctx context.Context, data *StudentBaseInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentBaseInfoModel struct {
		sqlc.CachedConn
		table string
	}

	StudentBaseInfo struct {
		Id         int64          `db:"id"`
		StudentNo  string         `db:"student_no"`  // 学号
		SchoolName string         `db:"school_name"` // 学校名称
		Grade      sql.NullInt64  `db:"grade"`       // 年级，一年级为1，依次累加
		PetName    sql.NullString `db:"pet_name"`    // 个人昵称
		CreateTime time.Time      `db:"create_time"` // 注册时间
		UpdateTime time.Time      `db:"update_time"` // 信息更新时间
		IsDeleted  int64          `db:"is_deleted"`  // 0:用户活跃，1:用户注销
		PhoneNo    sql.NullString `db:"phone_no"`    // 用户手机号
		IconUrl    sql.NullString `db:"icon_url"`    // 个人头像
		Birthday   sql.NullString `db:"birthday"`    // 生日
		Gender     sql.NullInt64  `db:"gender"`      // 0:女生，1:男生
		Password   sql.NullString `db:"password"`    // 用户登陆密码，加过密的
	}
)

func newStudentBaseInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStudentBaseInfoModel {
	return &defaultStudentBaseInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`StudentBaseInfo`",
	}
}

func (m *defaultStudentBaseInfoModel) Insert(ctx context.Context, data *StudentBaseInfo) (sql.Result, error) {
	studentBaseInfoStudentNoKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoStudentNoPrefix, data.StudentNo)
	studentBaseInfoIdKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, studentBaseInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentNo, data.SchoolName, data.Grade, data.PetName, data.IsDeleted, data.PhoneNo, data.IconUrl, data.Birthday, data.Gender, data.Password)
	}, studentBaseInfoIdKey, studentBaseInfoStudentNoKey)
	return ret, err
}

func (m *defaultStudentBaseInfoModel) FindOne(ctx context.Context, id int64) (*StudentBaseInfo, error) {
	studentBaseInfoIdKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoIdPrefix, id)
	var resp StudentBaseInfo
	err := m.QueryRowCtx(ctx, &resp, studentBaseInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentBaseInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentBaseInfoModel) FindOneByPetname(ctx context.Context,petName string) (*StudentBaseInfo, error) {
	studentBaseInfoPetNameKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoStudentPetNamePrefix, petName)
	var resp StudentBaseInfo
	err := m.QueryRowCtx(ctx, &resp, studentBaseInfoPetNameKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `pet_name` = ? limit 1", studentBaseInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, petName)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentBaseInfoModel) FindOneByStudentNo(ctx context.Context, studentNo string) (*StudentBaseInfo, error) {
	studentBaseInfoStudentNoKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoStudentNoPrefix, studentNo)
	var resp StudentBaseInfo
	err := m.QueryRowIndexCtx(ctx, &resp, studentBaseInfoStudentNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `student_no` = ? limit 1", studentBaseInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, studentNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentBaseInfoModel) Update(ctx context.Context, data *StudentBaseInfo) error {
	studentBaseInfoIdKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoIdPrefix, data.Id)
	studentBaseInfoStudentNoKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoStudentNoPrefix, data.StudentNo)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentBaseInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StudentNo, data.SchoolName, data.Grade, data.PetName, data.IsDeleted, data.PhoneNo, data.IconUrl, data.Birthday, data.Gender, data.Password, data.Id)
	}, studentBaseInfoStudentNoKey, studentBaseInfoIdKey)
	return err
}

func (m *defaultStudentBaseInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	studentBaseInfoIdKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoIdPrefix, id)
	studentBaseInfoStudentNoKey := fmt.Sprintf("%s%v", cacheStudentBaseInfoStudentNoPrefix, data.StudentNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, studentBaseInfoStudentNoKey, studentBaseInfoIdKey)
	return err
}

func (m *defaultStudentBaseInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStudentBaseInfoIdPrefix, primary)
}

func (m *defaultStudentBaseInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentBaseInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStudentBaseInfoModel) tableName() string {
	return m.table
}
