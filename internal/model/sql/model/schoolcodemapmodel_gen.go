// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	schoolCodeMapFieldNames          = builder.RawFieldNames(&SchoolCodeMap{})
	schoolCodeMapRows                = strings.Join(schoolCodeMapFieldNames, ",")
	schoolCodeMapRowsExpectAutoSet   = strings.Join(stringx.Remove(schoolCodeMapFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	schoolCodeMapRowsWithPlaceHolder = strings.Join(stringx.Remove(schoolCodeMapFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSchoolCodeMapIdPrefix         = "cache:schoolCodeMap:id:"
	cacheSchoolCodeMapSchoolCodePrefix = "cache:schoolCodeMap:schoolCode:"
)

type (
	schoolCodeMapModel interface {
		Insert(ctx context.Context, data *SchoolCodeMap) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SchoolCodeMap, error)
		FindOneBySchoolCode(ctx context.Context, schoolCode int64) (*SchoolCodeMap, error)
		Update(ctx context.Context, data *SchoolCodeMap) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) ([]*SchoolCodeMap, error)
	}

	defaultSchoolCodeMapModel struct {
		sqlc.CachedConn
		table string
	}

	SchoolCodeMap struct {
		Id                int64     `db:"id"`
		SchoolCode        int64     `db:"school_code"`
		SchoolName        string    `db:"school_name"`
		SchoolAddressCode int64     `db:"school_address_code"`
		SchoolDesc        string    `db:"school_desc"`
		CreateTime        time.Time `db:"create_time"`
		UpdateTime        time.Time `db:"update_time"`
		Status            int64     `db:"status"` // 0:信息有效，1:信息删除
	}
)

func newSchoolCodeMapModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSchoolCodeMapModel {
	return &defaultSchoolCodeMapModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`SchoolCodeMap`",
	}
}

func (m *defaultSchoolCodeMapModel) Insert(ctx context.Context, data *SchoolCodeMap) (sql.Result, error) {
	schoolCodeMapIdKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapIdPrefix, data.Id)
	schoolCodeMapSchoolCodeKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapSchoolCodePrefix, data.SchoolCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, schoolCodeMapRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SchoolCode, data.SchoolName, data.SchoolAddressCode, data.SchoolDesc, data.Status)
	}, schoolCodeMapIdKey, schoolCodeMapSchoolCodeKey)
	return ret, err
}

func (m *defaultSchoolCodeMapModel) FindOne(ctx context.Context, id int64) (*SchoolCodeMap, error) {
	schoolCodeMapIdKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapIdPrefix, id)
	var resp SchoolCodeMap
	err := m.QueryRowCtx(ctx, &resp, schoolCodeMapIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schoolCodeMapRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSchoolCodeMapModel) FindOneBySchoolCode(ctx context.Context, schoolCode int64) (*SchoolCodeMap, error) {
	schoolCodeMapSchoolCodeKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapSchoolCodePrefix, schoolCode)
	var resp SchoolCodeMap
	err := m.QueryRowIndexCtx(ctx, &resp, schoolCodeMapSchoolCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `school_code` = ? limit 1", schoolCodeMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, schoolCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSchoolCodeMapModel) Update(ctx context.Context, data *SchoolCodeMap) error {
	schoolCodeMapIdKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapIdPrefix, data.Id)
	schoolCodeMapSchoolCodeKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapSchoolCodePrefix, data.SchoolCode)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, schoolCodeMapRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SchoolCode, data.SchoolName, data.SchoolAddressCode, data.SchoolDesc, data.Status, data.Id)
	}, schoolCodeMapIdKey, schoolCodeMapSchoolCodeKey)
	return err
}

func (m *defaultSchoolCodeMapModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	schoolCodeMapIdKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapIdPrefix, id)
	schoolCodeMapSchoolCodeKey := fmt.Sprintf("%s%v", cacheSchoolCodeMapSchoolCodePrefix, data.SchoolCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, schoolCodeMapIdKey, schoolCodeMapSchoolCodeKey)
	return err
}

func (m *defaultSchoolCodeMapModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSchoolCodeMapIdPrefix, primary)
}

func (m *defaultSchoolCodeMapModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schoolCodeMapRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSchoolCodeMapModel) tableName() string {
	return m.table
}
