// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	schoolWallNotesFieldNames          = builder.RawFieldNames(&SchoolWallNotes{})
	schoolWallNotesRows                = strings.Join(schoolWallNotesFieldNames, ",")
	schoolWallNotesRowsExpectAutoSet   = strings.Join(stringx.Remove(schoolWallNotesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	schoolWallNotesRowsWithPlaceHolder = strings.Join(stringx.Remove(schoolWallNotesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheSchoolWallNotesIdPrefix        = "cache:schoolWallNotes:id:"
	cacheSchoolWallNotesStudentNoPrefix = "cache:schoolWallNotes:studentNo:"
)

type (
	schoolWallNotesModel interface {
		Insert(ctx context.Context, data *SchoolWallNotes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SchoolWallNotes, error)
		FindOneByStudentNo(ctx context.Context, studentNo string) (*SchoolWallNotes, error)
		Update(ctx context.Context, data *SchoolWallNotes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSchoolWallNotesModel struct {
		sqlc.CachedConn
		table string
	}

	SchoolWallNotes struct {
		Id           int64          `db:"id"`
		StudentNo    string         `db:"student_no"`
		NoteType     int64          `db:"note_type"`     // 标签样式编号
		NoteTitle    string         `db:"note_title"`    // 标签标题
		NoteTag      sql.NullString `db:"note_tag"`      // 信息标签
		NotesContent string         `db:"notes_content"` // 信息内容
		ImagesUrl    sql.NullString `db:"images_url"`    // 图片URL列表，数组形式，最多9张
		Watermark    int64          `db:"watermark"`     // 是否打标签
		CreateTime   time.Time      `db:"create_time"`
		UpdateTime   time.Time      `db:"update_time"`
		Status       int64          `db:"status"` // 0:信息有效，1:信息删除
	}
)

func newSchoolWallNotesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSchoolWallNotesModel {
	return &defaultSchoolWallNotesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`SchoolWallNotes`",
	}
}

func (m *defaultSchoolWallNotesModel) Insert(ctx context.Context, data *SchoolWallNotes) (sql.Result, error) {
	schoolWallNotesIdKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesIdPrefix, data.Id)
	schoolWallNotesStudentNoKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesStudentNoPrefix, data.StudentNo)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, schoolWallNotesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentNo, data.NoteType, data.NoteTitle, data.NoteTag, data.NotesContent, data.ImagesUrl, data.Watermark, data.Status)
	}, schoolWallNotesStudentNoKey, schoolWallNotesIdKey)
	return ret, err
}

func (m *defaultSchoolWallNotesModel) FindOne(ctx context.Context, id int64) (*SchoolWallNotes, error) {
	schoolWallNotesIdKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesIdPrefix, id)
	var resp SchoolWallNotes
	err := m.QueryRowCtx(ctx, &resp, schoolWallNotesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schoolWallNotesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSchoolWallNotesModel) FindOneByStudentNo(ctx context.Context, studentNo string) (*SchoolWallNotes, error) {
	schoolWallNotesStudentNoKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesStudentNoPrefix, studentNo)
	var resp SchoolWallNotes
	err := m.QueryRowIndexCtx(ctx, &resp, schoolWallNotesStudentNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `student_no` = ? limit 1", schoolWallNotesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, studentNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSchoolWallNotesModel) Update(ctx context.Context, data *SchoolWallNotes) error {
	schoolWallNotesIdKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesIdPrefix, data.Id)
	schoolWallNotesStudentNoKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesStudentNoPrefix, data.StudentNo)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, schoolWallNotesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StudentNo, data.NoteType, data.NoteTitle, data.NoteTag, data.NotesContent, data.ImagesUrl, data.Watermark, data.Status, data.Id)
	}, schoolWallNotesIdKey, schoolWallNotesStudentNoKey)
	return err
}

func (m *defaultSchoolWallNotesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	schoolWallNotesIdKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesIdPrefix, id)
	schoolWallNotesStudentNoKey := fmt.Sprintf("%s%v", cacheSchoolWallNotesStudentNoPrefix, data.StudentNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, schoolWallNotesIdKey, schoolWallNotesStudentNoKey)
	return err
}

func (m *defaultSchoolWallNotesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSchoolWallNotesIdPrefix, primary)
}

func (m *defaultSchoolWallNotesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", schoolWallNotesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSchoolWallNotesModel) tableName() string {
	return m.table
}
